{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/validator.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;ACZyC;AACc;AAEvD,IAAM,MAAM,GAAW,EAAE,CAAC;AAM1B;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;ACT7B,0HAA0H,okBAAokB,oEAAoE,m4BAAm4B,0EAA0E,+iCAA+iC,wEAAwE,2yBAA2yB,4EAA4E,u5BAAu5B,sEAAsE,ipC;;;;;;;;;;;ACA1pJ,+DAA+D,+H;;;;;;;;;;;;;;;;;;;ACAd;AACgC;AACvC;AAO1C;IAME,sBAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;QAJlC,eAAU,GAAG,2CAA2C,CAAC;QACzD,kBAAa,GAAG,oDAAoD,CAAC;QACrE,kBAAa,GAAG,aAAa,CAAC;QAG5B,IAAI,CAAC,IAAI,GAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACvB,KAAK,EAAE,CAAC,EAAE,EAAC,CAAE,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,EAAE,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;iBACtF,CAAC;YACF,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC;iBAC5H,CAAC;YACF,OAAO,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAClC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SAEhI,EAAC;YACA,SAAS,EAAE,8DAAW,CAAC,UAAU,EAAE,SAAS,CAAC;SAChD,CAAC;IACF,CAAC;IAEC,mBAAmB;IACnB,sCAAsC;IACtC,IAAI;IAEJ,+BAAQ,GAAR;IACA,CAAC;IAED,+BAAQ,GAAR;QACE,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAC9B,CAAC;IA/BQ,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;+EAOuB,0DAAW;OANvB,YAAY,CAgCxB;IAAD,mBAAC;CAAA;AAhCwB;;;;;;;;;;;;;;;;;;;;;;ACTiC;AACjB;AAEe;AACT;AACkB;AAejE;IAAA;IAAyB,CAAC;IAAb,SAAS;QAbrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,oEAAgB;gBAChB,kEAAmB;gBACnB,0DAAW;aACZ;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AClBtB;AAAA;AAAA,kDAAkD;AAC3C,SAAS,WAAW,CAAC,WAAmB,EAAE,mBAA2B;IACxE,OAAO,UAAC,SAAoB;QACxB,IAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAChD,IAAM,eAAe,GAAG,SAAS,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QAEhE,IAAI,eAAe,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE;YAC/D,gFAAgF;YAChF,OAAO;SACV;QAED,mDAAmD;QACnD,IAAI,OAAO,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,EAAE;YACzC,eAAe,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;SACpD;aAAM;YACH,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACnC;IACL,CAAC;AACL,CAAC;;;;;;;;;;;;;ACpBD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row justify-content-center\\\" style=\\\"margin-top: 40px;\\\">\\n        <div class=\\\"col-8\\\">\\n            <div class=\\\"jumbotron\\\">\\n                <h3>Form Custom Valdiation</h3>\\n\\n                <div>\\n                    <form name=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"form.valid && onSubmit()\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"email\\\">Email</label>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\"\\n                                placeholder=\\\"sample@example.com\\\"\\n                                [ngClass]=\\\"{'is-invalid':form.get('email').touched && form.get('email').invalid}\\\" />\\n                            <div *ngIf=\\\"form.get('email').touched && form.get('email').invalid\\\"\\n                                class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"form.get('email').errors.required\\\">Email is required</div>\\n                                <div *ngIf=\\\"form.get('email').errors.email || form.get('email').errors.pattern\\\">Email\\n                                    must be a valid format(eg. sample@example.com)</div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"password\\\">Password</label>\\n                            <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\"\\n                                placeholder=\\\"Min 8 characters allowed\\\"\\n                                [ngClass]=\\\"{'is-invalid':form.get('password').touched && form.get('password').invalid}\\\" />\\n                            <div *ngIf=\\\"form.get('password').touched && form.get('password').invalid\\\"\\n                                class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"form.get('password').errors.required\\\">Password is required</div>\\n                                <div *ngIf=\\\"form.get('password').errors.minlength\\\">Password must be at least 8\\n                                    charactor</div>\\n                                <div *ngIf=\\\"form.get('password').errors.pattern\\\">Password didn't match its creteria\\n                                </div>\\n                            </div>\\n\\n                        </div>\\n\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"passwordConfirm\\\">Confirm Password</label>\\n                            <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"passwordConfirm\\\" formControlName=\\\"cnfpass\\\"\\n                                placeholder=\\\"please confirm your Password\\\"\\n                                [ngClass]=\\\"{'is-invalid':form.get('cnfpass').touched && form.get('cnfpass').invalid}\\\" />\\n                            <div *ngIf=\\\"form.get('cnfpass').touched && form.get('cnfpass').invalid\\\"\\n                                class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"form.get('cnfpass').errors.required\\\">Confirm your password</div>\\n                                <div *ngIf=\\\"form.get('cnfpass').errors.mustMatch\\\">Passwords should match</div>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"firstName\\\">First Name</label>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\"\\n                                placeholder=\\\"enter first Name here\\\"\\n                                [ngClass]=\\\"{'is-invalid':form.get('firstName').touched && form.get('firstName').invalid}\\\"\\n                                required />\\n                            <div *ngIf=\\\"form.get('firstName').touched && form.get('firstName').invalid\\\"\\n                                class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"form.get('firstName').errors.required\\\">First Name is required</div>\\n                                <div *ngIf=\\\"form.get('firstName').errors.minlength\\\">At least 2 charachters are required\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"mobileNumber\\\">Mobile Number</label>\\n                            <input required type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"mobile\\\"\\n                                placeholder=\\\"Enter Mobile Number\\\"\\n                                [ngClass]=\\\"{'is-invalid':form.get('mobile').touched && form.get('mobile').invalid}\\\"\\n                                required />\\n                            <div *ngIf=\\\"form.get('mobile').touched && form.get('mobile').invalid\\\"\\n                                class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"form.get('mobile').errors.required\\\">Mobile No is required.</div>\\n                                <div *ngIf=\\\"form.get('mobile').errors.minlength\\\">\\n                                    Length Should be 10 numbers Only excluding country Code</div>\\n                                <div *ngIf=\\\"form.get('mobile').errors.maxlength\\\">\\n                                    Length Should be 10 numbers Only excluding country Code</div>\\n                                <div *ngIf=\\\"form.get('mobile').errors.pattern\\\">It should be Numeric Only</div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <button class=\\\"btn btn-primary\\\" (click)=\\\"onSubmit()\\\">Register</button>\\n                        </div>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit} from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { ShouldMatch } from './validator'; \n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  form: FormGroup;\n  emailRegEx = '^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$';\n  passwordRegEx = '^(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$';\n  mobileNoRegEx = '^[0-9]{10}$';\n\n  constructor(private fb:FormBuilder){\n    this.form= this.fb.group({\n      email: ['',[ Validators.required, Validators.email, Validators.pattern(this.emailRegEx)\n      ]],\n      password: ['', [Validators.required,Validators.minLength(8), Validators.maxLength(30), Validators.pattern(this.passwordRegEx) \n      ]],\n      cnfpass: ['', Validators.required],\n      firstName: ['', [Validators.required, Validators.minLength(2)]],\n      mobile: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(10), Validators.pattern(this.mobileNoRegEx)]]\n\n    },{\n      validator: ShouldMatch('password', 'cnfpass')\n  })\n  }\n  \n    // get firstname(){\n    //   return this.form.get('firstName')\n    // }\n    \n    ngOnInit() {\n    }\n  \n    onSubmit(){\n      alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.form.value))\n      console.log(this.form.value)\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component'; \nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { FormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function ShouldMatch(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n        if (matchingControl.errors && !matchingControl.errors.shouldMatch) {\r\n            // return if another validator has already found an error on the matchingControl\r\n            return;\r\n        }\r\n\r\n        // set error on matchingControl if validation fails\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ shouldMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}